#! /usr/bin/env python
# encoding: utf-8

cfg_deps = {
    'gconf': {
        'uselib': 'GCONF',
        'packages': 'gconf-2.0'
    }
}

cfg_type_deps = {
}

def build_cfg_backend(bld, name):
    cfg = bld.new_task_gen('cc', 'shlib')
    cfg.source = 'config-impl-%s.vala' % name
    deps = 'GMODULE GOBJECT'
    pkgs = 'gmodule-2.0'
    if name in cfg_deps:
        deps += ' ' + cfg_deps[name]['uselib']
        pkgs += ' ' + cfg_deps[name]['packages']
    cfg.uselib = deps
    cfg.packages = pkgs
    cfg.uselib_local = 'desktop-agnostic'
    cfg.target = 'da-cfg-' + name
    cfg.vapi_dirs = '../vapi'
    cfg.includes='..'
    cfg.install_path = None
    bld.install_files('${LIBDIR}/desktop-agnostic/modules',
                      bld.env['shlib_PATTERN'] % cfg.target)

def build_cfg_type(bld, name):
    cfg = bld.new_task_gen('cc', 'shlib')
    cfg.source = 'config-type-%s.vala' % name
    deps = 'GMODULE GOBJECT'
    pkgs = 'gmodule-2.0'
    if name in cfg_type_deps:
        deps += ' ' + cfg_type_deps[name]['uselib']
        pkgs += ' ' + cfg_type_deps[name]['packages']
    cfg.uselib = deps
    cfg.packages = pkgs
    cfg.uselib_local = 'desktop-agnostic'
    cfg.target = 'da-cfg-type-' + name
    cfg.vapi_dirs = '../vapi'
    cfg.includes='..'
    cfg.install_path = None
    bld.install_files('${LIBDIR}/desktop-agnostic/modules',
                      bld.env['shlib_PATTERN'] % cfg.target)

def set_options(opt):
    opt.add_option('--config-backends', type='string',
                   help='Determines which configuration backend(s) will be built.',
                   dest='config_backends', default='')

def build(bld):
    lib = bld.new_task_gen('cc', 'shlib')
    lib.source = ' '.join([
        'color.vala',
        'config-iface.vala',
        'config-bridge.vala',
        'config-schema.vala',
        'config-schema-option.vala',
        'config-schema-type.vala',
        'module.vala',
        'vfs-glob.vala'
        ])
    lib.packages = 'gdk-2.0 gmodule-2.0'
    lib.target = 'desktop-agnostic'
    lib.uselib = 'GDK GMODULE'
    lib.packages_private = 'posix-glob posix-errno'
    lib.vapi_dirs = '../vapi'
    lib.includes='..'

    [build_cfg_type(bld, name) for name in ['color']]

    [build_cfg_backend(bld, cfg) for cfg in bld.env['BACKENDS_CFG']]
