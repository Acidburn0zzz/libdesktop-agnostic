#! /usr/bin/env python
# encoding: utf-8

import Params

cfg_deps = {
    'gconf': {
        'uselib': 'GCONF',
        'packages': 'gconf-2.0'
    }
}

def build_cfg_backend(bld, name):
    cfg = bld.create_obj('cc', 'shlib')
    cfg.source = 'config-impl-%s.vala' % name
    deps = 'GMODULE GOBJECT'
    pkgs = 'gmodule-2.0'
    if name in cfg_deps:
        deps += ' ' + cfg_deps[name]['uselib']
        pkgs += ' ' + cfg_deps[name]['packages']
    cfg.uselib = deps
    cfg.packages = pkgs
    cfg.uselib_local = 'desktop-agnostic'
    cfg.target = 'da-cfg-' + name
    cfg.vapi_dirs = '.'
    cfg.inst_var = 'LIBDIR'
    cfg.inst_dir = 'desktop-agnostic/modules'

def set_options(opt):
    opt.add_option('--config-backends', type='string', help='Determines which configuration backend(s) will be built.', dest='config_backends', default='')

def build(bld):
    lib = bld.create_obj('cc', 'shlib')
    lib.source = 'color.vala config-iface.vala config-bridge.vala config-schema.vala module.vala'
    lib.packages = 'gdk-2.0 gmodule-2.0'
    lib.target = 'desktop-agnostic'
    lib.uselib = 'GDK GMODULE'
    lib.vapi_dirs = './vapi'
    install_files('DATADIR', 'vala/vapi', 'desktop-agnostic.vapi')

    t_cfg_bridge = bld.create_obj('cc', 'program')
    t_cfg_bridge.source = 'test-config-bridge.vala'
    t_cfg_bridge.uselib = 'GMODULE GOBJECT'
    t_cfg_bridge.uselib_local = 'desktop-agnostic'
    t_cfg_bridge.vapi_dirs = '.'
    t_cfg_bridge.target = 'test-config-bridge'

    [build_cfg_backend(bld, cfg) for cfg in bld.env()['BACKENDS_CFG']]
